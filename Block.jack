/** 
 * A graphical tetromino. Characterised by a starting location (x, y), size,
 * type code (determines shape), and set of coordinates. 
 *
 * Has methods for drawing, erasing, and rotating a tetromino Block on screen. 
 * Other methods set Block type based on 4-digit code, find width or height
 * of the Block, and find the min|max values of the Block's x|y coordinates. 
 *
 * Has methods for moving the tetromino left right, and descending.   
 */

class Block {
	
	field int x, y;           // starting location of Block's top-left corner
	field int size;			  // size of individual square in Block
	field int direction; 	  // direction of the Block's movement (1=left, 2=right)
	field Array type;         // array to hold Block type code
	field Array coordinates;  // array to hold co's of all squares in Block
	field boolean rotation;   // two rotation types (true and false)

	/** Constructs a new Block with given size, type, and coordinates. */
	constructor Block new(int Asize, int Ax, int Ay, Array Aarray) {
		let size = Asize;
		let x = Ax;
		let y = Ay;
		let rotation = false;
		let type = Aarray;

		do getCoordinates();

		return this;
	}

	/** Deallocates the Block's memory. */
	method void dispose() {
		do Array.dispose(coordinates[0]);
		do Array.dispose(coordinates[1]);
		do Array.dispose(coordinates[2]);
		do Array.dispose(coordinates[3]);
		do coordinates.dispose();
		do Memory.deAlloc(this);
		return;
	}

	/** Draws the Block to the screen. */
	method void draw() {
		var int i;
		var Array a;

		while (i < 4) {
			let a = coordinates[i];
			do Screen.drawRectangle(a[0], a[1], a[2], a[3]);
			let i = i + 1;
		}

		return;
	}

	/** Shows the Block. */
	method void show() {
		do Screen.setColor(true);
		do draw();
		return;
	}

	/** Hides the Block. */
	method void hide() {
		do Screen.setColor(false);
		do draw();
		return;
	}

	/** Prints the block off-screen (for showing next block). */
	method void showNext() {
		var Array a;
		var int i;

		let i = 0;
		while (i < 4) {
			let a = coordinates[i];
			let a[0] = a[0] + 162;
			let a[2] = a[2] + 162;
			let a[1] = a[1] + 110;
			let a[3] = a[3] + 110;
			let i = i + 1;
		}

		do show();

		return;
	}

	/** Resets coordinates back to original after showNext() altered them. */
	method void reset() {
		var Array a;
		var int i;

		do hide();

		let i = 0;
		while (i < 4) {
			let a = coordinates[i];
			let a[0] = a[0] - 162;
			let a[2] = a[2] - 162;
			let a[1] = a[1] - 110;
			let a[3] = a[3] - 110;
			let i = i + 1;
		}
		return;
	}

	/** 
	 * Constructs a 4x4 matrix (i.e., 2d list) to hold the 
	 * 4 sets of coordinates needed to draw each square of the tetromino.
	 * Called only once - namely, when the Block constructor is called.
	 */
	method void getCoordinates() {
		var int i, gap, dx; 	// gap = 2 leads to 2-pixel separation
		var Array temp;

		let i = 0;
		let coordinates = Array.new(4);

		while (i < 4) {
			let coordinates[i] = Array.new(4);
			let temp = coordinates[i];

			if (type[i] < 4) {
				let dx = (x + (size * type[i]));
				let gap = (2 * type[i]);

				let temp[0] = dx + gap;
				let temp[1] = y;
				let temp[2] = dx + size + gap;
				let temp[3] = y + size;
			}
			else {
				let dx = (x + (size * (type[i] - 4)));
				let gap = (2 * (type[i] - 4));

				let temp[0] = dx + gap;
				let temp[1] = y + size + 2;
				let temp[2] = dx + size + gap;
				let temp[3] = y + (2 * size) + 2;
			}

			let i = i + 1;
		}

		return;
	}

	/**
	 * Finds the height|width of the Block by (1) appending x|y coordinates 
	 * from the 4x4 coordinate matrix to an 8-item array; and (2) subtracting
	 * the minimum value from the maximum value. 0 (width) or 1 (height) 
	 * are the possible arguments.
	 */
	method int getWidthOrHeight(int xOry) {
		var int i, j;
		var Array a, temp;
		var int maximum, minimum;
		var int k;

		let k = xOry;
		let i = 0;
		let j = 0;
		let a = Array.new(8);

		while (i < 4) {
			let temp = coordinates[i];
			let a[j] = temp[k];
			let j = j + 1;
			let a[j] = temp[k + 2];
			let j = j + 1;
			let i = i + 1; 
		}

		let maximum = getMaximum(k);
		let minimum = getMinimum(k);

		do a.dispose(); 	// dispose memory allocated for a

		return (maximum - minimum);
	}

	/**
	 * Appends all x|y coordinates in 4x4 coordinate matrix to an 8-item
	 * array, then computes minimum. 0 (x) or 1 (y) are the possible arguments.
	 */
	method int getMinimum(int xOry) {
		var int i, j, minimum; 
		var Array a, temp;		// a holds the 8 x|y coordinates in 4x4 matrix					
		var int k; 				// control bit for checking whether x|y is used

		let k = xOry;
		let i = 0;
		let j = 0;
		let a = Array.new(8);

		while (i < 4) {
			let temp = coordinates[i];
			let a[j] = temp[k];
			let j = j + 1;
			let a[j] = temp[k + 2];
			let j = j + 1;
			let i = i + 1; 
		}

		let minimum = Math.min(
			a[0], Math.min(
			a[1], Math.min(
			a[2], Math.min(
			a[3], Math.min(
			a[4], Math.min(
			a[5], Math.min(
			a[6], a[7]))))))
		);

		do a.dispose(); 	// dispose memory allocated for a

		return minimum;
	}

	/** Gets maximum of x (0) or y (1). */
	method int getMaximum(int xOry) {
		var int i, j, maximum; 
		var Array a, temp;		// a holds the 8 x|y coordinates in 4x4 matrix					
		var int k; 				// control bit for checking whether x|y is used

		let k = xOry;
		let i = 0;
		let j = 0;
		let a = Array.new(8);

		while (i < 4) {
			let temp = coordinates[i];
			let a[j] = temp[k];
			let j = j + 1;
			let a[j] = temp[k + 2];
			let j = j + 1;
			let i = i + 1; 
		}

		let maximum = Math.max(
			a[0], Math.max(
			a[1], Math.max(
			a[2], Math.max(
			a[3], Math.max(
			a[4], Math.max(
			a[5], Math.max(
			a[6], a[7]))))))
		);

		do a.dispose();  	// dispose memory allocated for a

		return maximum;
	}

	/** Rotates the Block 90 degrees clockwise. */
	method void rotate() {
		var Array a;
		var int i, j, temp, height, width;
		var boolean overRotation;
		var int px, py;      // px, py are coordinates of the Block's pivot
		var int skew;		 // on each rotation, skew ensures that the Block's
							 // squares align with 20x10 board.

		if ((type[0] = 0) & (type[1] = 1) & (type[2] = 4) & (type[3] = 5)) {
			// do nothing because the tetromino is a square
		}
		else {
			let overRotation = false;
			let height = getWidthOrHeight(1);
			let width = getWidthOrHeight(0);
			let a = coordinates[0];
			let px = getMinimum(0) + (width / 2);
			let py = getMinimum(1) + (height / 2);	
			let i = 0;

			if (~(rotation)) {
				let skew = -6;
			}
			else {
				let skew = 6;
			}

			do hide();

			while (i < 4) {
				let a = coordinates[i];
				let temp = a[0]; 				
				let a[0] = (px + py - a[1] - size) + skew;	// rotate top-left corner
				let a[1] = (temp + py - px) + skew;	

				let a[2] = a[0] + size;					// set coordinates for
				let a[3] = a[1] + size; 				// bottom-right corner

				if (a[2] > 270) {
					let overRotation = true;
				}
				
				let i = i + 1;
			}

			if (overRotation) {
				let i = 0;
				while (i < 4) {
					let a = coordinates[i];
					let a[0] = a[0] - 24;
					let a[2] = a[2] - 24;
					let i = i + 1;
				}	
			}

			let rotation = ~(rotation);
			do show();
		}
		
		return;
	}

	/** Sets the Block's direction (1 = left, 2 = right). */
	method void setDirection(int Adirection) {
		let direction = Adirection;
		return;
	}

	/** 
	 * Moves the Block one step in the Block's direction by adding
	 * the width of the Tetris game's cols to each x coordinate. 
	 * The Block cannot move left or right if doing so would exceed
	 * the left or right wall.
	 */
	method void move() {
		var Array a;
		var int i;

		let i = 0;

		do hide();

		if ((direction = 1) & (getMinimum(0) > 164)) {
			while (i < 4) {
				let a = coordinates[i];
				let a[0] = a[0] - 12; 		// width of each Tetris col = 12
				let a[2] = a[2] - 12;
				let i = i + 1;
			}
		}
		if ((direction = 2) & (getMaximum(0) < 273)) {
			while (i < 4) {
				let a = coordinates[i];
				let a[0] = a[0] + 12;
				let a[2] = a[2] + 12;
				let i = i + 1;
			}
		}
		do show();

		return;
	}

	/** Moves Block one step down if doing so would not pass bottom wall. */
	method void descend() {
		var Array a;
		var int i;

		do hide();

		while (i < 4) {
			let a = coordinates[i];
			let a[1] = a[1] + 12;
			let a[3] = a[3] + 12;
			let i = i + 1;
		}

		do show();

		return;
	}

	/** Returns true if block has hit the lowest col of the board. */
	method boolean atBottom() {
		var boolean check;

		if (getMaximum(1) = 235) {
			let check = true;
		}

		return check;
	}

	/** 
	 * Checks to see whether another block is occupying the part of the 
	 * board into which the current block would like to descend. 
	 * 
	 * Note that to find the value of a mem. location that holds a pixel,
	 * the formula is: Screen[y_coordinate*32 + x_coordinate/16]. Also,
	 * ConvertToBin stores the result of the conversion as 16 decimal values
	 * in RAM[16001] - RAM[16002].
	 */
	method boolean obstructionCheck() {
		var int i;
		var Array temp, yCoordinates, xCoordinates;
		var boolean check;

		var int newy;
		var int oldAddress, newAddress;
		var int oldBinaryPart, newBinaryPart;

		let i = 0;
		let yCoordinates = Array.new(4);	// holds all bottom-right yCoords
		let xCoordinates = Array.new(4); 	// holds all bottom-right xCoords
		while (i < 4) {
			let temp = coordinates[i];
			let yCoordinates[i] = temp[3];
			let xCoordinates[i] = temp[2];
			let i = i + 1;
		}

		let check = false;
		let i = 0;
		while (i < 4) {
			let temp = coordinates[i];
			let newy = temp[3] + 12;

			if (
				((newy = yCoordinates[0]) & (temp[2] = xCoordinates[0])) | 
				((newy = yCoordinates[1]) & (temp[2] = xCoordinates[1])) | 
				((newy = yCoordinates[2]) & (temp[2] = xCoordinates[2])) | 
				((newy = yCoordinates[3]) & (temp[2] = xCoordinates[3]))) {
				let i = i + 1;
			}
			else {
				let oldAddress = 16384 + (temp[3] * 32) + (temp[2] / 16);
				let oldAddress = Memory.peek(oldAddress);
				do ConvertToBin.main(oldAddress);
				let oldBinaryPart = Memory.peek(16000 + (temp[2] - ((temp[2] / 16) * 16)));

				let newAddress = 16384 + (newy * 32) + (temp[2] / 16);
				let newAddress = Memory.peek(newAddress);
				do ConvertToBin.main(newAddress);
				let newBinaryPart = Memory.peek(16000 + (temp[2] - ((temp[2] / 16) * 16)));

				if ((oldBinaryPart = 1) & (newBinaryPart = 1)) {
					let check = true;
				}
				let i = i + 1;
			}
		}

		do yCoordinates.dispose(); 	// dispose memory allocated for coordinate arrays
		do xCoordinates.dispose(); 

		return check;
	}
	
}
