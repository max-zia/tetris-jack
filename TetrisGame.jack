/** Represents a Tetris game. */

class TetrisGame {

	field Block currentBlock;
	field Block nextBlock;
	field int lineScore;		// line clears
	field int tetrisScore;		// tetris clears
	field boolean exit; 		// true when the game is over
	field Array typeCodes; 		// matrix of valid tetromino type codes
	field Array signature; 		// holds memory signature of full line

	/** Constructs a new Tetris game. */
	constructor TetrisGame new() {
		let exit = false;
		let lineScore = 0;
		let tetrisScore = 0;

		let signature = Array.new(8);
		let signature[0] = -2049;
		let signature[1] = -129;
		let signature[2] = 32759;
		let signature[3] = -2049;
		let signature[4] = -129;
		let signature[5] = 32759;
		let signature[6] = -2049;
		let signature[7] = 639;

		do getTypeCodes();
		return this;
	}

	/** Deallocates the TetrisGame's memory. */
	method void dispose() {
		var int i;
		let i = 0;

		while (i < 7) {
			do Array.dispose(typeCodes[i]);
			let i = i + 1;
		}

		do currentBlock.dispose();
		do nextBlock.dispose();
		do signature.dispose();
		do typeCodes.dispose();
		do Memory.deAlloc(this);
		return;
	}

	/** Draws the board (10 cols, 20 rows of size 12). */
	method void drawBoard() {
		do Screen.drawLine(157, 6, 281, 6);			// main board
		do Screen.drawLine(157, 6, 157, 250);
		do Screen.drawLine(157, 250, 281, 250);
		do Screen.drawLine(281, 6, 281, 250);

		do Output.moveCursor(9, 45);				// next block board
		do Output.printString("Next");
		do Screen.drawLine(340, 90, 410, 90);
		do Screen.drawLine(340, 154, 410, 154);
		do Screen.drawLine(340, 90, 340, 154);
		do Screen.drawLine(410, 90, 410, 154);

		do Output.moveCursor(16, 40); 				// scoreboard
		do Output.printString("Lines Cleared: 0");
		do Output.moveCursor(18, 40);
		do Output.printString("Tetris Clears: 0");

		return;
	}

	/** Creates 4x7 matrix of type codes for valid tetrominos. */
	method void getTypeCodes() {
		var int i;
		var Array temp;

		let typeCodes = Array.new(7);

		while (i < 7) {
			let typeCodes[i] = Array.new(4);
			let i = i + 1;
		}

		let temp = typeCodes[0]; 	// straight
		let temp[0] = 0;
		let temp[1] = 1;
		let temp[2] = 2;
		let temp[3] = 3;

		let temp = typeCodes[1];	// inverse L
		let temp[0] = 0;
		let temp[1] = 1;
		let temp[2] = 2;
		let temp[3] = 6;

		let temp = typeCodes[2]; 	// L
		let temp[0] = 0;
		let temp[1] = 1;
		let temp[2] = 2;
		let temp[3] = 4;

		let temp = typeCodes[3]; 	// Z
		let temp[0] = 0;
		let temp[1] = 1;
		let temp[2] = 5;
		let temp[3] = 6;

		let temp = typeCodes[4]; 	// S
		let temp[0] = 1;
		let temp[1] = 2;
		let temp[2] = 4;
		let temp[3] = 5;

		let temp = typeCodes[5]; 	// T
		let temp[0] = 0;
		let temp[1] = 1;
		let temp[2] = 2;
		let temp[3] = 5;

		let temp = typeCodes[6]; 	// O
		let temp[0] = 0;
		let temp[1] = 1;
		let temp[2] = 4;
		let temp[3] = 5;

		return;
	}

	/** Returns a random array holding a tetromino type code. */
	method Array getType(int Arandom) {
		var int random;
		let random = Arandom;
		return (typeCodes[random]);
	}

	/** Shows start menu and sets seed for PRNG. */
	method void showMenu() {
		var boolean startScreen;
		var int seed;
		var char key;

		do Output.moveCursor(6,23);
	    do Output.printString("HIT ENTER TO START");
	    do Output.moveCursor(9, 23);
	    do Output.printString("-----Controls-----");
	    do Output.moveCursor(11, 23);
	    do Output.printString("R arrow = Right");
	   	do Output.moveCursor(12, 23);
	    do Output.printString("L arrow = Left");
	    do Output.moveCursor(13, 23);
	    do Output.printString("R       = Rotate");
	    do Output.moveCursor(14, 23);
	    do Output.printString("Q       = Quit");


	    let startScreen = true;
	    let seed = 0;
		while (startScreen) {
			let key = Keyboard.keyPressed();
			if (key = 128) {
				do Screen.clearScreen();
				let startScreen = false;
			}
			else {
				let seed = seed + 1;
			}
		}
		do Random.setSeed(seed);
		return;
	}

	/** Checks what key was pressed and responds appropriately. */
	method void checkKey(char aKey) {
		var char key;
		let key = aKey; 

		if (key = 130) { 							// left arrow
			do currentBlock.setDirection(1); 
			do currentBlock.move();
		}
		if (key = 132) { 							// right arrow
			do currentBlock.setDirection(2);
			do currentBlock.move();
		}
		if (key = 82) { 							// r key
			do currentBlock.rotate(); 
		}
		if (key = 81) { let exit = true; }			// q key

		return;
	}

	/** 
	 * Checks to see whether a line is full of blocks.
	 * Each line occupies 7.5 16-bit mem locations.
	 */
	method boolean lineFull(int AmemLocation) {
		var int memLocation;
		var int i;
		var boolean check;

		let i = 0;
		let memLocation = AmemLocation;
		let check = false;

		while (i < 9) {
			if (i = 8) {
				let check = true;
				let i = 9;
			}
			else {
				if (signature[i] = Memory.peek(memLocation + i)) {
					let i = i + 1;
				}
				else {
					let i = 9;
				}
			}
		}
		return check;
	}

	/** Clears a line of blocks. */
	method void clearLine(int AmemLocation) {
		var int i, j;
		var int memLocation;

		let i = 0;
		let memLocation = AmemLocation;

		while (i < 11) {
			let j = 0;
			while (j < 7) {
				do Memory.poke(memLocation + j, 0);
				let j = j + 1;
			}
			// Final mem. location in each row is shared with border
			do Memory.poke(memLocation + j, 512);
			let memLocation = memLocation + 32;
			let i = i + 1;
		}
		return;
	}

	/** Shifts everything above a given row down 1 row after line clear. */
	method void shiftDown(int AmemLocation) {
		var int j, k;
		var int memValue;
		var int memLocation;

		let memLocation = AmemLocation;

		while (memLocation > 17032) {
			let k = 0;
			while (k < 11) {
				let j = 0;
				while (j < 8) {
					let memValue = Memory.peek((memLocation + j) - (32 * 12));
					do Memory.poke(memLocation + j, memValue);
					let j = j + 1;
				}
				let memLocation = memLocation - 32;
				let k = k + 1;
			}
			let memLocation = memLocation - 32;
		}
		return;
	}

	/** Checks every line, clears it, and shifts the blocks down. */
	method int checkLines() {
		var int i;
		var int counter;
		var int memLocation;

		let i = 0;
		let counter = 0;
		let memLocation = 23978;

		while (memLocation > 17032) {
			if (lineFull(memLocation)) {
				do clearLine(memLocation);
				do shiftDown(memLocation + (32 * 10));
				let counter = counter + 1;
			}
			else {
				let memLocation = memLocation - (32 * 12);
			}
			let i = i + 1;
		}
		return counter;
	}

	/** Updates the score and prints it to the screen. */
	method void updateScore() {
		do Output.moveCursor(16, 55);
		do Output.printInt(lineScore);
		do Output.moveCursor(18, 55);
		do Output.printInt(tetrisScore);
		return;
	}

	/** Checks to see whether player has lost. */
	method boolean playerLost() {
		var boolean check;
		let check = false;

		if (Memory.peek(17134) = 127) {
			let check = true;
		}
		return check;
	}

	/** Starts the game and handle's inputs that control movement direction. */
	method void run() {
		var char key;
		var int i, random;
		var int roundScore;
		var boolean atBottom;

		do showMenu();
		do drawBoard();

		let atBottom = false;

		// Initialise first two tetrominos
		let random = Random.randRange(6);
		let currentBlock = Block.new(10, 196, 9, getType(random));
		let random = Random.randRange(6);
		let nextBlock = Block.new(10, 196, 9, getType(random));

		while (~exit) {

			if (playerLost()) {
				let exit = true;
			}
			do nextBlock.showNext();

			while ((~atBottom) & (~exit)) {

				do currentBlock.show();

				let atBottom = currentBlock.atBottom();

				if (~(currentBlock.obstructionCheck())) {
					do Sys.wait(50);
					do currentBlock.descend();
				}
				else {
					let atBottom = true;
				}

				let i = 0;
				// waits for a key to be pressed
				while (i < 5000) {
					let key = Keyboard.keyPressed();
					let i = i + 1;

					if (~(key = 0)) {
						let i = 5000;
					}
				}

				do checkKey(key);
				let key = 0;

				do Sys.wait(50);
			}

			// update Scoring
			let roundScore = checkLines();
			if (roundScore = 4) {
				let tetrisScore = tetrisScore + 1;
			}
			let lineScore = lineScore + roundScore;
			do updateScore();

			// setup blocks for next round
			do nextBlock.reset();
			do currentBlock.dispose();
			let currentBlock = nextBlock;

			let random = Random.randRange(6);
			let nextBlock = Block.new(10, 196, 9, getType(random));
			let atBottom = false;
		}

		if (exit) {
            do Output.moveCursor(5,42);
	        do Output.printString("GAME OVER");
    	} 

		return;
	}
	
}